import pandas as pd
import numpy as np
import os

def transform_data(df: pd.DataFrame, output_path: str = "data/processed/clean_data.csv") -> pd.DataFrame:
    """
    –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö + –≤–∞–ª–∏–¥–∞—Ü–∏—è.
    
    Args:
        df: –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame
        output_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (CSV –∏ Parquet)
    
    Returns:
        pd.DataFrame –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    """
    original_rows = df.shape[0]

    # ----------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ -----------
    df.columns = [c.strip().lower().replace(" ", "_") for c in df.columns]

    # ----------- –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ -----------
    text_cols = df.select_dtypes(include='object').columns.tolist()
    for col in text_cols:
        df[col] = df[col].astype(str).str.strip().str.lower()

    fill_values = {
        "allergies": "none",
        "comorbidities": "none",
        "asthma_control_level": "unknown"
    }

    for col in text_cols:
        if col in fill_values:
            df[col] = df[col].replace({'nan': fill_values[col]}).fillna(fill_values[col])
        else:
            df[col] = df[col].replace({'nan': 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ'}).fillna('ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ')

    # ----------- –ß–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã -----------
    numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        df[col] = df[col].fillna(0)

    # ----------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π -----------
    if 'age' in df.columns:
        df.loc[(df['age'] < 0) | (df['age'] > 120), 'age'] = np.nan
        df['age'] = df['age'].fillna(df['age'].median())

    if 'bmi' in df.columns:
        df.loc[(df['bmi'] < 10) | (df['bmi'] > 70), 'bmi'] = np.nan
        df['bmi'] = df['bmi'].fillna(df['bmi'].median())

    # ----------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç -----------
    date_cols = []
    for col in text_cols:
        try:
            df[col] = pd.to_datetime(df[col], errors='raise')
            date_cols.append(col)
        except:
            pass

    for col in date_cols:
        df[col] = pd.to_datetime(df[col], errors='coerce')
        df[col] = df[col].fillna(pd.Timestamp('2000-01-01'))

    # ----------- –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ -----------
    df = df.drop_duplicates()

    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã: –∏—Å—Ö–æ–¥–Ω–æ {original_rows} —Å—Ç—Ä–æ–∫, –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ {df.shape[0]} —Å—Ç—Ä–æ–∫")

    # ----------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV -----------
    if output_path:
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        df.to_csv(output_path, index=False, encoding="utf-8")
        print(f"‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV: {output_path}")

        # ----------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Parquet -----------
        parquet_path = os.path.splitext(output_path)[0] + ".parquet"
        df.to_parquet(parquet_path, index=False)
        print(f"‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Parquet: {parquet_path}")

    # ----------- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ -----------
    print("\nüìä –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
    print(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {df.shape[0]}")
    print(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {df.shape[1]}")
    print(f"- –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏ —Ç–∏–ø—ã:\n{df.dtypes}")
    print(f"- –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:\n{df.head()}")
    print(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º:\n{df.isna().sum()}")

    return df

if __name__ == "__main__":
    df = pd.read_csv("data/raw/raw_data.csv")
    df_clean = transform_data(df)
