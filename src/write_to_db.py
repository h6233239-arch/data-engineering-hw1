import os
import psycopg2
import pandas as pd
import numpy as np

# ==============================
# 1Ô∏è‚É£ –ß—Ç–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ==============================
file_path = "processed_asthma.csv"  # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É CSV

# –ß—Ç–µ–Ω–∏–µ CSV
df = pd.read_csv(file_path)
original_rows = df.shape[0]

# ----------- –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É -----------
df.columns = [c.strip().lower().replace(" ", "_") for c in df.columns]

# ----------- –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ -----------
text_cols = df.select_dtypes(include='object').columns.tolist()
for col in text_cols:
    df[col] = df[col].astype(str).str.strip().str.lower()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

# ----------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ -----------
fill_values = {
    "allergies": "none",
    "comorbidities": "none",
    "asthma_control_level": "unknown"
}

for col in text_cols:
    if col in fill_values:
        df[col] = df[col].replace({'nan': fill_values[col]}).fillna(fill_values[col])
    else:
        df[col] = df[col].replace({'nan': '–Ω–µ_—É–∫–∞–∑–∞–Ω–æ'}).fillna('–Ω–µ_—É–∫–∞–∑–∞–Ω–æ')

# ----------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ -----------
numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
for col in numeric_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')
    df[col] = df[col].fillna(0)

# ----------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π -----------
if 'age' in df.columns:
    df.loc[(df['age'] < 0) | (df['age'] > 120), 'age'] = np.nan
    df['age'] = df['age'].fillna(df['age'].median())

if 'bmi' in df.columns:
    df.loc[(df['bmi'] < 10) | (df['bmi'] > 70), 'bmi'] = np.nan
    df['bmi'] = df['bmi'].fillna(df['bmi'].median())

# ----------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –¥–∞—Ç–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) -----------
date_cols = []
for col in text_cols:
    try:
        df[col] = pd.to_datetime(df[col], errors='raise')
        date_cols.append(col)
    except:
        pass

for col in date_cols:
    df[col] = pd.to_datetime(df[col], errors='coerce')
    df[col] = df[col].fillna(pd.Timestamp('2000-01-01'))

# ----------- –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ -----------
df = df.drop_duplicates()

# ----------- –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫ -----------
df = df.head(100)

print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã: –∏—Å—Ö–æ–¥–Ω–æ {original_rows} —Å—Ç—Ä–æ–∫, –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤—ã—Ö 100 —Å—Ç—Ä–æ–∫ {df.shape[0]} —Å—Ç—Ä–æ–∫")

# ==============================
# 2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
# ==============================
host = os.getenv("PG_HOST")
port = os.getenv("PG_PORT")
user = os.getenv("PG_USER")
password = os.getenv("PG_PASSWORD")
dbname = "homeworks"

if not all([host, port, user, password]):
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (PG_HOST, PG_PORT, PG_USER, PG_PASSWORD)!")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
conn_pg = psycopg2.connect(host=host, port=port, dbname=dbname, user=user, password=password)
cursor_pg = conn_pg.cursor()

table_name = 'alahmad'

# ----------- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã -----------
cursor_pg.execute("""
    SELECT table_name
    FROM information_schema.tables
    WHERE table_schema='public' AND table_name=%s;
""", (table_name,))
table_exists = cursor_pg.fetchone()

# ----------- –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã -----------
if table_exists:
    print(f"‚öôÔ∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    cursor_pg.execute(f"TRUNCATE TABLE public.{table_name};")
else:
    print(f"üÜï –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
    columns = ', '.join([f"{col} TEXT" for col in df.columns])
    cursor_pg.execute(f"CREATE TABLE public.{table_name} ({columns});")

# ==============================
# 3Ô∏è‚É£ –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
# ==============================
for _, row in df.iterrows():
    values = tuple(row)
    placeholders = ', '.join(['%s'] * len(row))
    cursor_pg.execute(f"INSERT INTO public.{table_name} VALUES ({placeholders})", values)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
conn_pg.commit()

# ==============================
# 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
# ==============================
cursor_pg.execute(f"SELECT COUNT(*) FROM public.{table_name};")
row_count = cursor_pg.fetchone()[0]
print(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}': {row_count}")

df_check = pd.read_sql(f"SELECT * FROM public.{table_name} LIMIT 10;", conn_pg)
print("\n–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã:")
print(df_check)

cursor_pg.close()
conn_pg.close()

print(f"\nüéâ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}' ‚úÖ")
